include <Rso/Game/Protocol>
include <Rso/Physics/Protocol>
include <Rso/GameUtil/Protocol>

namespace bb
{
	using namespace rso
	using namespace net
	using namespace game
	using namespace physics
	using namespace gameutil

	typedef int64 TIndex
	typedef int32 TLevel
	typedef int32 THP
	typedef int8 TSlotNo
	typedef int32 TExp
	typedef int32 TRank
	typedef int8 TTeamCnt
	typedef uint8 TQuestSlotIndex

	const TVer c_Ver_Main 38

	const int32 c_FPS 60
	const int64 c_NetworkTickSync 500000
	const int64 c_NetworkTickBuffer c_NetworkTickSync+500000
	const float c_ScreenWidth 3.448f
	const float c_ScreenWidth_2 c_ScreenWidth*0.5f
	const float c_2_ScreenWidth c_ScreenWidth*2.0f
	const float c_ScreenHeight 3.5f
	const float c_ScreenHeight_2 c_ScreenHeight*0.5f
	const float c_ContactOffset 0.0001f
	const float c_LandXDragPerFrame 1.0f/c_FPS

	const float c_ScreenCenterX 3.448f
	const float c_ScreenCenterY c_ScreenHeight*0.5f

	const float c_Factor c_ScreenWidth*0.75f
	const float c_DefaultVel c_Factor*0.22f
	const float c_MaxVelDeadY c_DefaultVel*2.0f
	const float c_FlapOnAcc c_Factor*0.25f
	const float c_AccExt c_Factor
	const float c_Gravity -c_FlapOnAcc
	const float c_MaxVelParachuteX c_DefaultVel*1.2f
	const float c_MaxVelParachuteY c_DefaultVel*0.5f
	const float c_GravityParachuteRatio 0.5f
	const float c_GravityDeadRatio 2.0f
	const float c_ParachuteAccX c_FlapOnAcc
	const float c_DieUpVel 0.7f
	const float c_AirResistance 1.0f
	const float c_GroundResistance 0.1f

	const float c_PlayerWidth 0.1258713f
	const float c_PlayerHeight 0.150337f
	const float c_PlayerOffsetY c_PlayerHeight*0.5f
	const float c_BalloonWidth 0.2f
	const float c_BalloonHeight 0.27f
	const float c_BalloonOffsetY 0.5f
	const float c_BalloonLocalScale 0.5f
	const float c_ParachuteWidth 0.45f
	const float c_ParachuteHeight 0.25f
	const float c_ParachuteOffsetY 0.37f
	const float c_ParachuteLocalScale 0.5f
	const float c_OnePumpDuration 0.4f

	const int32 c_MaxPlayer 6
	const float c_GhostSpeed 3.0f
	const float c_GameHeight 3.5f
	const int8 c_BalloonCountForRegen 2
	const int8 c_BalloonCountForPump 1
	const int8 c_PumpCountForBalloon 6
	const int64 c_BattleStartDelayMilliSec 2000
	const int64 c_ChainKillDelayTickCount 50000000
	const int64 c_RegenDelayTickCount 20000000

	const int32 c_QuestCnt_Max 5

	enum class EProtoNetCs
	{
		Chat
		FCMTokenSet
		FCMTokenUnset
		FCMCanPushAtNight
		ChangeLanguage
		Buy
		BuyChar
		BuyPackage
		Purchase
		DailyReward
		SelectChar
		SingleStart
		SingleEnd
		IslandStart
		IslandEnd
		BattleJoin
		BattleOut
		BattleTouch
		BattlePush
		BattleIcon
		SingleBattleScore
		SingleBattleIcon
		SingleBattleItem
		RoomList
		RoomCreate
		RoomJoin
		RoomOut
		RoomReady
		RoomChat
		RoomNoti
		Gacha
		GachaX10
		RankReward
		QuestReward
		QuestNext
		QuestDailyCompleteReward
		ChangeNick
		CouponUse
		TutorialReward
		RankingRewardInfo
		RankingReward
		Max
		Null
	}
	enum class EProtoNetSc
	{
		Ret
		Msg
		Login
		Lobby
		Chat
		UserExp
		Resources
		SetPoint
		SetChar
		UnsetChar
		Buy
		BuyChar
		BuyPackage
		Purchase
		DailyReward
		DailyRewardFail
		SingleStart
		SingleEnd
		IslandStart
		IslandEnd
		BattleJoin
		BattleOut
		BattleBegin
		BattleMatching
		BattleStart
		BattleEnd
		BattleSync
		BattleTouch
		BattlePush
		BattleIcon
		BattleLink
		BattleUnLink
		SingleBattleStart
		SingleBattleScore
		SingleBattleIcon
		SingleBattleItem
		SingleBattleEnd
		RoomList
		RoomChange
		RoomCreate
		RoomJoin
		RoomJoinFailed
		RoomOut
		RoomOutFailed
		RoomReady
		RoomChat
		RoomNoti
		Gacha
		GachaX10
		GachaFailed
		QuestGot
		QuestDone
		QuestReward
		QuestNext
		QuestDailyCompleteReward
		ChangeNick
		ChangeNickFail
		CouponUse
		CouponUseFail
		RankingRewardInfo
		RankingReward
		RankingRewardFail
		Max
	}

	enum class ERet
	{
		Ok
		InvalidTime
		UserDoesNotExist
		SameCanNotPushAtNight
		SameCode
		InvalidProtocol
		InvalidLanguage
		InvalidShopID
		InvalidGoodsID
		InvalidCharCode
		ReceiptCheckFail
		SPError

		NotBattleJoining
		AlreadyBattleJoining
		AlreadyInBattle
		AlreadyHave
		InvalidBattleType
		MatchInsertFail
		BattleBeginFail
		NotEnoughMoney
		NoMoreNewCharacter
		NickLengthUnderMin
		NickLengthOverMax
		CouponAlreadyUsed
		CouponInvalid

		RankingServerOffLine
		RankingNoReward
		RankingRewarded
		RankingRewardFail

		Max
		Null
	}
	enum class ELanguage : uint8
	{
		English
		Korean
		France
		Germany
		Spain
		Italia
		ChinaCH
		ChinaTW
		Japan
		Portugal
		Russia
		Nederland
		Turkey
		Finland
		Malaysia
		Thailand
		Indonesia
		Vietnam
		India
		Max
	}
	enum class EGrade : uint8
	{
		Normal
		Rare
		Epic
		Unique
		Max
	}

	enum class EGameMode
	{
		Single
		Solo
		Survival
		Team
		SurvivalSmall
		TeamSmall
		IslandSolo
		DodgeSolo
		Max
		Null
	}
	enum class ERoomState : uint8
	{
		RoomWait
		RoomAllReady
		RoomPlay
		RoomEndWait
		RoomEmpty
	}

	enum class ERankingType
	{
		Multi
		Single
		Island
		Max
		Null
	}

	struct SUserLoginOption
	{
		EOS OS
	}
	struct SUserCreateOption
	{
		SUserLoginOption LoginOption
		ELanguage Language
	}
	enum class EResource
	{
		Ticket
		Gold
		Dia
		CP
		DiaPaid
		Max
		Null
	}

	typedef int32 TResource
	typedef array<TResource,5> TResources

	enum class ERewardType : uint8
	{
		Resource_Ticket
		Resource_Gold
		Resource_Dia
		Resource_CP
		Character
		Max
	}
	enum class EQuestType
	{
		TeamPlay
		TeamVictory
		SurvivalPlay
		SurvivalVictory
		IngameConsecutiveKill
		IngameBalloonPopping
		IngameKill
		IngameBestPlayer
		GachaRuby
		BlowBalloon
		PlayNormal
		PlayRare
		PlayEpic
		PlaySingle
		SingleTime
		SinglePlayGoldGet
		SinglePlayScoreGet
		PlayIsland
		IslandCount
		IslandGoldGet
		IslandScoreGet
		SurvivalPlayRanking
		RankPointGet
		SoloPlay
		SoloVictory
		Survival3PPlay
		Survival3PVictory
		MultiSinglePlay
		MultiIslandPlay
		Max
		Null=-1
	}

	struct SQuestSlotIndexCount
	{
		TQuestSlotIndex SlotIndex
		int32 Count
	}
	typedef list<SQuestSlotIndexCount> TDoneQuests

	struct SRetNetSc
	{
		ERet Ret
	}
	struct SMsgNetSc
	{
		wstring Msg
	}
	struct SResourceTypeData
	{
		EResource Type
		TResource Data
	}
	struct SUserCore
	{
		TResources Resources
		int8 Debug
		int32 SelectedCharCode
		int32 SinglePlayCount
		time_point SingleRefreshTime
		int32 IslandPlayCount
		time_point IslandRefreshTime
		time_point QuestDailyCompleteRefreshTime
		int32 ChangeNickFreeCount
		time_point DailyRewardExpiredTime
		int32 DailyRewardCountLeft
	}
	struct SUserBase : SUserCore
	{
		TExp Exp
		bool CanPushAtNight
		int32 Point
		int32 PointBest
		int32 LastGotRewardRankIndex
		int32 WinCountSolo
		int32 LoseCountSolo
		int32 WinCountSurvival
		int32 LoseCountSurvival
		int32 WinCountMulti
		int32 LoseCountMulti
		int32 BattlePointBest
		int32 SinglePointBest
		int32 IslandPointBest
		int32 SingleSecondBest
		int32 IslandPassedCountBest
		int32 KillTotal
		int32 ChainKillTotal
		int32 BlowBalloonTotal
		int32 QuestDailyCompleteCount
		bool TutorialReward
		bool SingleStarted
		bool IslandStarted
		int64 RankingRewardedCounter
		TNick NewNick
	}
	struct SUserNet : SUserBase
	{
		wstring CountryCode
	}

	typedef set<int32> TChars

	struct SQuestBase
	{
		int32 Code
		int32 Count
		time_point CoolEndTime
	}
	typedef map<TQuestSlotIndex,SQuestBase> TQuestDBs

	typedef set<int32> TPackages
	struct SLoginNetSc
	{
		SUserNet User
		TChars Chars
		time_point ServerTime
		TQuestDBs Quests
		TPackages Packages
		int32 RoomIdx
	}
	struct SLobbyNetSc
	{
	}
	struct SUserExpNetSc
	{
		TExp Exp
	}
	struct SResourcesNetSc
	{
		TResources Resources
	}
	struct SSetPointNetSc
	{
		int32 Point
	}
	struct SSetCharNetSc
	{
		list<int32> CharCodes
	}
	struct SUnsetCharNetSc
	{
		list<int32> CharCodes
	}

	struct SChatNetCs
	{
		wstring Msg
	}
	struct SChatNetSc
	{
		wstring Msg
	}

	struct SFCMTokenSetNetCs
	{
		wstring Token
	}
	struct SFCMTokenUnsetNetCs
	{
	}
	struct SFCMCanPushAtNightNetCs
	{
		bool CanPush
	}
	struct SChangeLanguageNetCs
	{
		ELanguage Language
	}
	struct SBuyNetCs
	{
		int32 Code
	}
	struct SBuyNetSc
	{
		int32 Code
	}
	struct SBuyCharNetCs
	{
		int32 Code
	}
	struct SBuyCharNetSc
	{
		int32 Code
	}
	struct SBuyPackageNetCs
	{
		int32 Code
	}
	struct SBuyPackageNetSc
	{
		int32 Code
	}

	struct SPurchaseNetCs
	{
		wstring ProductID
		wstring PurchaseToken
	}
	struct SPurchaseNetSc
	{
		wstring ProductID
		TResource DiaPaidAdded
	}
	struct SDailyRewardNetCs
	{
		bool IsWatchedAd
	}
	struct SDailyRewardNetSc
	{
		SResourceTypeData Reward
		time_point ExpiredTime
		int32 CountLeft

	}
	struct SDailyRewardFailNetSc
	{
	}

	struct SSelectCharNetCs
	{
		int32 Code
	}

	struct SSingleStartNetCs
	{
	}
	struct SSingleStartNetSc
	{
		TResource GoldCost
		int32 PlayCount
		time_point RefreshTime
		TDoneQuests DoneQuests
	}
	struct SSingleEndNetCs
	{
		int32 Wave
		int32 Second
		TResource Gold
		TResource GoldAdded
		TResource DiaAdded
	}
	struct SSingleEndNetSc
	{
		TDoneQuests DoneQuests
	}

	struct SIslandStartNetCs
	{
	}
	struct SIslandStartNetSc
	{
		TResource GoldCost
		int32 PlayCount
		time_point RefreshTime
		TDoneQuests DoneQuests
	}
	struct SIslandEndNetCs
	{
		int32 PassedIslandCount
		TResource Gold
		TResource GoldAdded
		TResource DiaAdded
	}
	struct SIslandEndNetSc
	{
		TDoneQuests DoneQuests
	}

	struct SBattleType
	{
		EGameMode GameMode
		int8 MemberCount
		TTeamCnt TeamCount
	}
	struct SBattleRecord
	{
		int32 TotalKillCount
		int32 TotalBalloonHitCount
	}
	struct SBattleJoinNetCs
	{
		SBattleType BattleType
	}
	struct SBattleJoinNetSc
	{
	}
	struct SBattleOutNetCs
	{
	}
	struct SBattleOutNetSc
	{
	}
	struct SPumpInfo
	{
		int8 Count
		int8 CountTo
		float Scale
	}
	struct SParachuteInfo
	{
		float Scale
		float Velocity
	}
	struct SStaminaInfo
	{
		int64 LastUsedTick
		float Stamina
	}
	struct SBattlePlayer
	{
		TUID UID
		u16string Nick
		wstring CountryCode
		TTeamCnt TeamIndex
		int32 CharCode
		int32 Point
	}
	struct SCharacter
	{
		bool IsGround
		int8 Dir
		int8 BalloonCount
		SPumpInfo PumpInfo
		SParachuteInfo ParachuteInfo
		SStaminaInfo StaminaInfo
		int8 Face
		SPoint Acc
		int64 InvulnerableEndTick
		int32 ChainKillCount
		int64 LastKillTick
		int64 RegenTick
	}
	struct SCharacterNet : SCharacter
	{
		SPoint Pos
		SPoint Vel
	}
	struct STeamBattleInfo
	{
	}
	typedef vector<STeamBattleInfo> TTeamBattleInfos
	struct SBattle
	{
		SBattleType BattleType
		int32 MapIndex
	}
	struct SBattleBeginNetSc : SBattle
	{
		vector<SBattlePlayer> Players
		SBattleRecord Record
		vector<SCharacterNet> Characters
		time_point EndTime
		int64 Tick
		vector<SStructMovePosition> StructMovePositions
	}
	struct SBattleMatchingNetSc
	{
		int32 UserCount
	}
	struct SBattleStartNetSc
	{
		time_point EndTime
	}
	struct SSingleBattleStartNetSc
	{
		time_point EndTime
	}
	struct SSingleBattleIconNetCs
	{
		int32 Code
	}
	struct SSingleBattleIconNetSc
	{
		int32 PlayerIndex
		int32 Code
	}
	struct SSingleBattleItemNetCs
	{
		int32 Code
	}
	struct SSingleBattleItemNetSc
	{
		int32 PlayerIndex
		int32 Code
	}
	struct SBattleEndPlayer
	{
		int32 AddedPoint
		int32 AddedGold
		int32 BattlePoint
	}

	struct SBattleEndNetSc
	{
		list<SBattleEndPlayer> BattleEndPlayers
		TTeamBattleInfos TeamBattleInfos
		TDoneQuests DoneQuests
	}

	struct SSingleBattleEndNetSc : SBattleEndNetSc
	{
		EGameMode GameMode
	}

	struct SBattleSyncNetSc
	{
		int64 Tick
	}
	struct SBattleTouchNetCs
	{
		int8 Dir
	}
	struct SBattleTouchNetSc
	{
		int64 Tick
		int32 PlayerIndex
		int8 Dir
	}
	struct SBattlePushNetCs
	{
	}
	struct SBattlePushNetSc
	{
		int64 Tick
		int32 PlayerIndex
	}
	struct SBattleIconNetCs
	{
		int32 Code
	}
	struct SBattleIconNetSc
	{
		int32 PlayerIndex
		int32 Code
	}

	struct SSingleBattleScoreNetCs
	{
		int32 Score
	}
	struct SSingleBattleScoreNetSc
	{
		int32 PlayerIndex
		int32 Score
	}

	struct SBattleLinkNetSc
	{
		int64 Tick
		int32 PlayerIndex
	}
	struct SBattleUnLinkNetSc
	{
		int64 Tick
		int32 PlayerIndex
	}

	struct SRankingUserCore
	{
		u16string Nick
		int32 CharCode
		wstring CountryCode
	}
	struct SRankingUser : SRankingUserCore
	{
		TUID UID
		int32 Point
	}

	struct SRankingUserSingleCore : SRankingUserCore
	{
		int32 Wave
		int32 Second
		int32 Gold
	}
	struct SRankingUserSingle : SRankingUserSingleCore
	{
		TUID UID
		int32 Point
	}

	struct SRankingUserIslandCore : SRankingUserCore
	{
		int32 PassedIslandCount
		int32 Gold
	}
	struct SRankingUserIsland : SRankingUserIslandCore
	{
		TUID UID
		int32 Point
	}

	typedef list<SRankingUser> TRankingUsers
	typedef list<SRankingUserSingle> TRankingUserSingles
	typedef list<SRankingUserIsland> TRankingUserIslands

	struct SRanking
	{
		TRankingUsers RankingUsers
		TRankingUserSingles RankingUserSingles
		TRankingUserIslands RankingUserIslands
	}
	struct SRankingUserPointMin
	{
		int32 UserPointMin
		int32 UserPointMinSingle
		int32 UserPointMinIsland
	}

	enum class EProtoRankingNetCs
	{
		RequestRanking
		Max
	}
	enum class EProtoRankingNetSc
	{
		RequestRanking
		Max
	}

	struct SGachaNetCs
	{
		int32 GachaIndex
	}
	struct SGachaX10NetCs
	{
		int32 GachaIndex
	}
	struct SGachaNetSc
	{
		TResources Cost
		int32 Index
		int32 CharCode
	}
	struct SGachaX10NetSc
	{
		TResources Cost
		int32 Index
		list<int32> CharCodeList
		TResources Refund
	}
	struct SGachaFailedNetSc : SGachaNetSc
	{
		TResources Refund
	}
	struct SRankRewardNetCs
	{
	}
	struct SQuestSlotIndexCode
	{
		TQuestSlotIndex SlotIndex
		int32 Code
	}
	typedef list<SQuestSlotIndexCode> TQuestSlotIndexCodes
	struct SQuestGotNetSc
	{
		TQuestSlotIndexCodes Quests
	}
	struct SQuestDoneNetSc
	{
		TQuestSlotIndex SlotIndex
		int32 Count
	}
	struct SQuestRewardNetCs
	{
		TQuestSlotIndex SlotIndex
	}
	struct SQuestRewardNetSc
	{
		TQuestSlotIndex SlotIndex
		time_point CoolEndTime
		int32 DailyCompleteCount
		time_point DailyCompleteRefreshTime
	}
	struct SQuestNextNetCs
	{
		TQuestSlotIndex SlotIndex
	}
	struct SQuestNextNetSc
	{
		TQuestSlotIndex SlotIndex
		int32 NewCode
	}
	struct SQuestDailyCompleteRewardNetCs
	{
		bool WatchAd
	}
	struct SQuestDailyCompleteRewardNetSc
	{
		bool WatchAd
		time_point RefreshTime
	}

	struct SChangeNickNetCs
	{
		u16string Nick
	}
	struct SChangeNickNetSc
	{
		u16string Nick
	}
	struct SChangeNickFailNetSc
	{
		EGameRet GameRet
		wstring ForbiddenWord
	}

	struct SNickPoint
	{
		int32 Point
	}
	struct SCheckIDNetSc
	{
		list<SNickPoint> Datas
	}

	struct SCouponUseNetCs
	{
		wstring Key
	}
	struct SRewardDB
	{
		TUID UID
		TResources ResourcesLeft
		list<int32> CharsAdded
	}
	struct SCouponUseNetSc : SRewardDB
	{
	}
	struct SCouponUseFailNetSc
	{
		ERet Ret
	}

	struct STutorialRewardNetCs
	{
	}

	typedef map<TUID,int32> TRankingRewards
	struct SRankingRewardInfoNetCs
	{
	}
	struct SRankingRewardInfoNetSc
	{
		int64 Counter
		int32 Ranking
		int32 RankingSingle
		int32 RankingIsland
	}
	struct SRankingRewardNetCs
	{
	}
	struct SRankingRewardNetSc
	{
		int64 Counter
		int32 RewardCode
		int32 RewardCodeSingle
		int32 RewardCodeIsland
	}
	struct SRankingRewardFailNetSc
	{
		ERet Ret
	}
	struct SRoomInfo
	{
		EGameMode Mode
		int32 RoomIdx
		TUID MasterUID
		u16string MasterUser
		wstring Password
		int32 UserCount
		ERoomState State
	}
	typedef map<int32,SRoomInfo> SRooms
	struct SRoomChangeNetSc
	{
		int32 RoomIdx
		SRoomInfo RoomInfo
		bool IsEmpty
	}
	struct SRoomListNetCs
	{
	}
	struct SRoomListNetSc
	{
		SRooms RoomList
	}
	struct SRoomCreateNetCs
	{
		EGameMode Mode
		wstring Password
	}
	struct SRoomCreateNetSc
	{
		SRoomInfo RoomInfo
	}
	struct SRoomJoinNetCs
	{
		int32 RoomIdx
	}
	struct SRoomJoinNetSc
	{
		SRoomInfo RoomInfo
	}
	struct SRoomJoinFailedNetSc
	{
	}
	struct SRoomOutNetCs
	{
		int32 RoomIdx
	}
	struct SRoomOutFailedNetSc
	{
	}
	struct SRoomOutNetSc
	{
	}
	struct SRoomReadyNetCs
	{
	}
	struct SRoomReadyNetSc
	{
		EGameMode Mode
	}
	struct SRoomChatNetCs
	{
		int32 RoomIdx
		wstring Message
	}
	struct SRoomChatNetSc
	{
		u16string UserNick
		wstring Message
	}
	struct SRoomNotiNetCs
	{
		int32 RoomIdx
	}
	struct SRoomNotiNetSc
	{
		SRoomInfo RoomInfo
	}
}
